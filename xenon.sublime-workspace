{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wi",
				"window"
			],
			[
				"I",
				"IPR_Window"
			],
			[
				"main",
				"mainLoop"
			],
			[
				"list",
				"listGPUs"
			],
			[
				"sho",
				"short_opts"
			],
			[
				"ar",
				"argc"
			],
			[
				"EXI",
				"EXIT_SUCCESS"
			],
			[
				"LOG_",
				"LOG_FTL"
			],
			[
				"E",
				"EXIT_FAILURE"
			],
			[
				"Fst",
				"FstRendererIPR"
			],
			[
				"he",
				"height_old"
			],
			[
				"w",
				"width_old"
			],
			[
				"h",
				"height"
			],
			[
				"s",
				"success"
			],
			[
				"VER",
				"vertex_shader"
			],
			[
				"get",
				"getName"
			],
			[
				"IMG_Til",
				"IMG_TileSocket"
			],
			[
				"UT",
				"UT_String"
			],
			[
				"seq",
				"seq"
			],
			[
				"ROP_",
				"ROP_Node"
			],
			[
				"re",
				"return"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/fasta_lib/renderer_ipr.cpp",
			"settings":
			{
				"buffer_size": 2940,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_cmd/fasta.cpp",
			"settings":
			{
				"buffer_size": 24120,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_cmd/ipr_window.cpp",
			"settings":
			{
				"buffer_size": 5266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <vector>\n\n#include \"fasta_lib/vulkan_tools.h\"\n\nVkResult CreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pDebugMessenger) {\n    auto func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, \"vkCreateDebugUtilsMessengerEXT\");\n    if (func != nullptr) {\n        return func(instance, pCreateInfo, pAllocator, pDebugMessenger);\n    } else {\n        return VK_ERROR_EXTENSION_NOT_PRESENT;\n    }\n}\n\nvoid DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT debugMessenger, const VkAllocationCallbacks* pAllocator) {\n    auto func = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, \"vkDestroyDebugUtilsMessengerEXT\");\n    if (func != nullptr) {\n        func(instance, debugMessenger, pAllocator);\n    }\n}\n\nVkPhysicalDevice pickPhysicalVulkanDevice(VkInstance instance) {\n\tVkPhysicalDevice physical_device = VK_NULL_HANDLE;\n    uint32_t device_count = 0;\n    vkEnumeratePhysicalDevices(instance, &device_count, nullptr);\n\n    if (device_count == 0) {\n        throw std::runtime_error(\"failed to find GPUs with Vulkan support!\");\n    }\n\n    std::vector<VkPhysicalDevice> devices(device_count);\n    vkEnumeratePhysicalDevices(instance, &device_count, devices.data());\n\n    for (const auto& device : devices) {\n        if (isVulkanDeviceSuitable(device)) {\n            physical_device = device;\n            break;\n        }\n    }\n\n    if (physical_device == VK_NULL_HANDLE) {\n        throw std::runtime_error(\"failed to find a suitable GPU!\");\n    }\n\n    return physical_device;\n}\n\nbool isVulkanDeviceSuitable(VkPhysicalDevice device) {\n    QueueFamilyIndices indices = findQueueFamilies(device);\n\n    return indices.isComplete();\n}\n\nQueueFamilyIndices findQueueFamilies(VkPhysicalDevice device) {\n    QueueFamilyIndices indices;\n\n    uint32_t queueFamilyCount = 0;\n    vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, nullptr);\n\n    std::vector<VkQueueFamilyProperties> queueFamilies(queueFamilyCount);\n    vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data());\n\n    int i = 0;\n    for (const auto& queueFamily : queueFamilies) {\n        if (queueFamily.queueFlags & VK_QUEUE_GRAPHICS_BIT) {\n            indices.graphicsFamily = i;\n        }\n\n        if (indices.isComplete()) {\n            break;\n        }\n\n        i++;\n    }\n\n    return indices;\n}\n\nvoid createLogicalDevice(VkPhysicalDevice physical_device) {\n    QueueFamilyIndices indices = findQueueFamilies(physical_device);\n\n    VkDeviceQueueCreateInfo queueCreateInfo = {};\n    queueCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;\n    queueCreateInfo.queueFamilyIndex = indices.graphicsFamily.value();\n    queueCreateInfo.queueCount = 1;\n\n    float queuePriority = 1.0f;\n    queueCreateInfo.pQueuePriorities = &queuePriority;\n\n    VkPhysicalDeviceFeatures deviceFeatures = {};\n\n    VkDeviceCreateInfo createInfo = {};\n    createInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;\n\n    createInfo.pQueueCreateInfos = &queueCreateInfo;\n    createInfo.queueCreateInfoCount = 1;\n\n    createInfo.pEnabledFeatures = &deviceFeatures;\n\n    createInfo.enabledExtensionCount = 0;\n\n    if (enableValidationLayers) {\n        createInfo.enabledLayerCount = static_cast<uint32_t>(validationLayers.size());\n        createInfo.ppEnabledLayerNames = validationLayers.data();\n    } else {\n        createInfo.enabledLayerCount = 0;\n    }\n\n    if (vkCreateDevice(physicalDevice, &createInfo, nullptr, &device) != VK_SUCCESS) {\n        throw std::runtime_error(\"failed to create logical device!\");\n    }\n\n    vkGetDeviceQueue(device, indices.graphicsFamily.value(), 0, &graphicsQueue);\n}\n",
			"file": "src/fasta_lib/vulkan_tools.cpp",
			"file_size": 2491,
			"file_write_time": 132299175222133089,
			"settings":
			{
				"buffer_size": 3781,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_lib/vulkan_tools.h",
			"settings":
			{
				"buffer_size": 824,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_cmd/ipr_window.h",
			"settings":
			{
				"buffer_size": 1505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_cmd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2000,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1698,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4230,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 3603,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/fasta",
		"/home/max/dev/fasta/src",
		"/home/max/dev/fasta/src/fasta_cmd",
		"/home/max/dev/fasta/src/fasta_lib",
		"/home/max/dev/fasta/src/fasta_utils_lib"
	],
	"file_history":
	[
		"/home/max/dev/fasta/src/fasta_lib/renderer.h",
		"/home/max/dev/fasta/CMakeLists.txt",
		"/home/max/dev/fasta/third_party/glad/include/KHR/khrplatform.h",
		"/home/max/dev/fasta/third_party/glad/include/glad/glad.h",
		"/home/max/dev/fasta/src/locomotive_lib/logging.h",
		"/home/max/dev/fasta/src/locomotive_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/locomotive_lib/logging.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.h",
		"/home/max/dev/fasta/src/xenon_py/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.h",
		"/home/max/dev/fasta/src/xenon_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_cmd/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Mesh.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.cpp",
		"/home/max/dev/fasta/src/xenon_cmd/fsquad.h",
		"/home/max/dev/fasta/src/xenon_cmd/xenon.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.cpp",
		"/home/max/projects/Xenon/xenon.sublime-project",
		"/home/max/projects/Xenon/src/ROP_Xenon.h",
		"/home/max/projects/Xenon/src/ROP_Xenon.cpp",
		"/home/max/projects/Xenon/makefile"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Program",
			"glfw_error_callback",
			"error_callback",
			"GL_LUMINANCE"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_program",
			"error_callback",
			"glfw_error_callback"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/fasta_lib/renderer_ipr.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2940,
						"regions":
						{
						},
						"selection":
						[
							[
								872,
								872
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/fasta_cmd/fasta.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24120,
						"regions":
						{
						},
						"selection":
						[
							[
								15991,
								15991
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10132.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/fasta_cmd/ipr_window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5266,
						"regions":
						{
						},
						"selection":
						[
							[
								1083,
								1083
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/fasta_lib/vulkan_tools.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3781,
						"regions":
						{
						},
						"selection":
						[
							[
								2620,
								2620
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1052.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/fasta_lib/vulkan_tools.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 824,
						"regions":
						{
						},
						"selection":
						[
							[
								787,
								787
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/fasta_cmd/ipr_window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1505,
						"regions":
						{
						},
						"selection":
						[
							[
								1141,
								1141
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/fasta_cmd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2000,
						"regions":
						{
						},
						"selection":
						[
							[
								31,
								31
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/fasta_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1698,
						"regions":
						{
						},
						"selection":
						[
							[
								1101,
								1101
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4230,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/fasta_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3603,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2623.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "xenon.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 316.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
