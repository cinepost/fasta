{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Fst",
				"FstRendererIPR"
			],
			[
				"he",
				"height_old"
			],
			[
				"w",
				"width_old"
			],
			[
				"h",
				"height"
			],
			[
				"s",
				"success"
			],
			[
				"VER",
				"vertex_shader"
			],
			[
				"get",
				"getName"
			],
			[
				"IMG_Til",
				"IMG_TileSocket"
			],
			[
				"UT",
				"UT_String"
			],
			[
				"seq",
				"seq"
			],
			[
				"ROP_",
				"ROP_Node"
			],
			[
				"re",
				"return"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#ifndef __FASTA_RENDERER_H__\n#define __FASTA_RENDERER_H__\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#include <glad/glad.h>\n\n#ifdef __APPLE__\n\t#include <OpenGL/gl.h>\n\t#include <OpenGL/OpenGL.h>\n\t#include <OpenGL/CGLTypes.h>\n\t#include <OpenGL/CGLCurrent.h>\n#elif __linux__\n\t#include <X11/X.h>\n\t#include <X11/Xlib.h> \n\t#include <GL/gl.h>\n\t#include <GL/glx.h>\n#endif\n\n#include \"fasta_lib/gbuffer.h\"\n#include \"fasta_lib/shader.h\"\n#include \"fasta_lib/object.h\"\n#include \"fasta_lib/light.h\"\n#include \"fasta_lib/display.h\"\n\n#ifdef __linux__\n\ttypedef GLXContext (*glXCreateContextAttribsARBProc)(Display*, GLXFBConfig, GLXContext, Bool, const int*);\n\ttypedef Bool (*glXMakeContextCurrentARBProc)(Display*, GLXDrawable, GLXDrawable, GLXContext);\n\tstatic glXCreateContextAttribsARBProc glXCreateContextAttribsARB = NULL;\n\tstatic glXMakeContextCurrentARBProc glXMakeContextCurrentARB = NULL;\n#endif\n\nnamespace fst {\n\nclass FstRendererIPR;\n\nclass FstRenderer {\n\tfriend class FstRendererIPR;\n\n\tpublic:\n\t\tFstRenderer();\n\t\t~FstRenderer();\n\t\tbool init();\n\n\t\tFstGBuffer *renderFrame(uint width, uint height);\n\t\t\n\t\tFstDisplay\t*getDisplay();\n\n\t\tFstObject\t*newObject();\n\t\tFstLight\t*newLight();\n\n\t\tuint getCompletedSamples() const;\n\n\tprivate:\n\t\tvoid _renderSample(uint sample, uint samples_total);\n\t\tbool _renderTile(uint xl, uint xr, uint yb, uint yt, uint tx, uint ty);\n\n\n\t\tFstGBuffer *renderbuffer;\n\t\tFstDisplay *display;\n\n\tprivate:\n\t\tbool initialized;\n\n\t\t#ifdef __APPLE__\n\t\t\tCGLContextObj\tctx;\n\t\t#elif __linux__\n\t\t\tGLXContext \t\tctx;\n\n\t\t\tDisplay* \t\tdpy;\n\t    \tGLXFBConfig* \tfbc;\n\t    \tGLXPbuffer \t\tpbuf;\n\t    #endif\n\n\t    int fbcount;\n\t    int\tmaxDrawBuffers;\n\n\tprivate:\n\t    FstShader shaderGeometryPass, shaderLightingPass;\n\n\tprivate:\n\t\tfloat\t\t\t\t\tcurrent_time;\n\t\tstd::vector<FstObject*>\tobjects;\n\t\tstd::vector<FstLight*>\tlights;\n\n\tprivate:\n\t\tuint _width;\n\t\tuint _height;\n\n};\n\n}\n\n#endif // __FASTA_RENDERER_H__",
			"file": "src/fasta_lib/renderer.h",
			"file_size": 1891,
			"file_write_time": 132260614983979184,
			"settings":
			{
				"buffer_size": 1891,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <iostream>\n\n#include \"fasta_utils_lib/logging.h\"\n#include \"fasta_lib/renderer_ipr.h\"\n\nnamespace fst {\n\nFstRendererIPR::FstRendererIPR(): _futureObj(_stopSignal.get_future()) {\n\tstd::cout << \"Fasta IPR renderer constructor called.\" << std::endl;\n\t_renderer = new FstRenderer();\n    std::cout << \"Fasta IPR renderer constructed.\" << std::endl;\n}\n\nFstRendererIPR::~FstRendererIPR(){\n\tstd::cout << \"Fasta IPR renderer destructor called.\" << std::endl;\n\n\tif(_renderer!=nullptr) \n\t\tdelete _renderer;\n\n\tstd::cout << \"Fasta IPR renderer destructed.\" << std::endl;\n}\n\nvoid FstRendererIPR::renderSamples() {\n\twhile (stopRequested() == false) {\n\t\tfor(uint i=0; i < _samples; i++){\n\t\t\t_state = State::RUNNING;\n\t  \t\twhile(_pause_ipr){\n\t  \t\t\t_state = State::PAUSED;\n\t     \t\tstd::unique_lock<std::mutex> lk(_m);\n\t     \t\t_cv.wait(lk);\n\t     \t\tlk.unlock();\n\t  \t\t}\n\t  \t_renderer->_renderSample(i, _samples);\n\t  \tstd::this_thread::sleep_for(std::chrono::milliseconds(1000));\n\t\t}\n\t\t_state = State::DONE;\n\t\tbreak;\n\t}\n\n\t_state = State::DONE;\n\tfprintf(stdout, \"ipr done\\n\");\n}\n\nvoid FstRendererIPR::run(uint width, uint height, uint samples) {\n\tfprintf(stdout, \"ipr run\\n\" );\n\t_width = width;\n\t_height = height;\n\t_samples = samples;\n\t_pause_ipr = false;\n\t_render_thread = std::make_unique<std::thread>(std::bind(&FstRendererIPR::renderSamples, this));\n\t_render_thread->detach();\n}\n\nvoid FstRendererIPR::pause() {\n\tstd::lock_guard<std::mutex> lk(_m);\n  \t_pause_ipr=true;\n  \tLOG_DBG << \"ipr paused\";\n}\n\nvoid FstRendererIPR::resume() {\n\tstd::lock_guard<std::mutex> lk(_m);\n  \t_pause_ipr=false;\n  \t_cv.notify_one();\n  \tLOG_DBG << \"ipr resumed\";\n}\n\nvoid FstRendererIPR::togglePause() {\n\tif (_state == State::PAUSED) {\n\t\tresume();\n\t} else if (_state == State::RUNNING) {\n\t\tpause();\n\t}\n}\n\nbool FstRendererIPR::stopRequested() {\n\t// checks if value in future object is available\n\tif (_futureObj.wait_for(std::chrono::milliseconds(1)) == std::future_status::timeout) return false;\n\treturn true;\n}\n\nvoid FstRendererIPR::resize(uint width, uint height) {\n\t//std::lock_guard<std::mutex> lk(_m);\n\tif ((_state == State::RUNNING) && ((_width != width) || (_height != height))){\n\t\tfprintf(stdout, \"ipr resize\\n\" );\n\t\t//_stopSignal.set_value();\n\t\t//_render_thread->join();\n\t\t//run(width, height, _samples);\n\t}\n}\n\n} // namespace",
			"file": "src/fasta_lib/renderer_ipr.cpp",
			"file_size": 2296,
			"file_write_time": 132260615138220786,
			"settings":
			{
				"buffer_size": 2296,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/fasta_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 5905,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/home/max/dev/fasta/CMakeLists.txt",
		"/home/max/dev/fasta/third_party/glad/include/KHR/khrplatform.h",
		"/home/max/dev/fasta/third_party/glad/include/glad/glad.h",
		"/home/max/dev/fasta/src/locomotive_lib/logging.h",
		"/home/max/dev/fasta/src/locomotive_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/locomotive_lib/logging.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.h",
		"/home/max/dev/fasta/src/xenon_py/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.h",
		"/home/max/dev/fasta/src/xenon_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_cmd/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Mesh.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.cpp",
		"/home/max/dev/fasta/src/xenon_cmd/fsquad.h",
		"/home/max/dev/fasta/src/xenon_cmd/xenon.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.cpp",
		"/home/max/projects/Xenon/xenon.sublime-project",
		"/home/max/projects/Xenon/src/ROP_Xenon.h",
		"/home/max/projects/Xenon/src/ROP_Xenon.cpp",
		"/home/max/projects/Xenon/makefile"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Program",
			"glfw_error_callback",
			"error_callback",
			"GL_LUMINANCE"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_program",
			"error_callback",
			"glfw_error_callback"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/fasta_lib/renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1891,
						"regions":
						{
						},
						"selection":
						[
							[
								976,
								976
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/fasta_lib/renderer_ipr.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2296,
						"regions":
						{
						},
						"selection":
						[
							[
								872,
								872
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/fasta_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5905,
						"regions":
						{
						},
						"selection":
						[
							[
								4531,
								4531
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2652.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "xenon.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 215.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
